package postman.bottler.global.response.code;

import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
@AllArgsConstructor
public enum ErrorStatus {
    // 알림 에러
    INVALID_NOTIFICATION_CREATION(HttpStatus.BAD_REQUEST, "NOTIFICATION4000"),
    NOTIFICATION_NO_LETTER(HttpStatus.BAD_REQUEST, "NOTIFICATION4001"),
    NOTIFICATION_NO_TYPE(HttpStatus.BAD_REQUEST, "NOTIFICATION4002"),

    // 신고 에러
    INVALID_COMPLAINT(HttpStatus.BAD_REQUEST, "COMPLAINT4000"),
    DUPLICATE_COMPLAINT(HttpStatus.BAD_REQUEST, "COMPLAINT4001"),

    // 공통 에러
    INVALID_LOGIN(HttpStatus.BAD_REQUEST, "COMMON400"),
    FORBIDDEN(HttpStatus.FORBIDDEN, "COMMON403"),

    // 키워드 편지 에러
    LETTER_NOT_FOUND(HttpStatus.NOT_FOUND, "LETTER4040"),
    LETTER_ALREADY_SAVED(HttpStatus.BAD_REQUEST, "LETTER4000"),
    LETTER_ACCESS_DENIED(HttpStatus.FORBIDDEN, "LETTER4030"),
    LETTER_VALIDATION_ERROR(HttpStatus.BAD_REQUEST, "LETTER4001"),
    LETTER_UNKNOWN_VALIDATION_ERROR(HttpStatus.BAD_REQUEST, "LETTER4002"),
    LETTER_DELETE_VALIDATION_ERROR(HttpStatus.BAD_REQUEST, "LETTER4003"),
    REPLY_LETTER_VALIDATION_ERROR(HttpStatus.BAD_REQUEST, "REPLY_LETTER4001"),

    // 페이징 에러
    PAGINATION_VALIDATION_ERROR(HttpStatus.BAD_REQUEST, "PAGING4001"),
    INVALID_SORT_FIELD(HttpStatus.BAD_REQUEST, "PAGING4001"),

    // 라벨 에러
    INVALID_LABEL(HttpStatus.BAD_REQUEST, "LABEL4000"),
    EMPTY_LABEL_INPUT(HttpStatus.BAD_REQUEST, "LABEL4001"),
    USER_LABEL_NOT_FOUND(HttpStatus.NOT_FOUND, "LABEL4002"),
    OVER_LIMIT_COUNT(HttpStatus.FORBIDDEN, "LABEL4003"),
    DUPLICATE_LABEL(HttpStatus.BAD_REQUEST, "LABEL4004"),

    // 유저 에러
    INVALID_EMAIL(HttpStatus.BAD_REQUEST, "USER4000"),
    INVALID_PASSWORD(HttpStatus.BAD_REQUEST, "USER4001"),
    INVALID_NICKNAME(HttpStatus.BAD_REQUEST, "USER4002"),
    INVALID_EMAIL_AND_PASSWORD(HttpStatus.BAD_REQUEST, "USER4003"),
    INVALID_TOKEN_INPUT(HttpStatus.BAD_REQUEST, "USER4004"),
    INVALID_USER(HttpStatus.FORBIDDEN, "USER4005"),
    INVALID_PROFILE_IMAGE(HttpStatus.BAD_REQUEST, "USER4006"),
    INVALID_EMAIL_CODE(HttpStatus.BAD_REQUEST, "USER4007"),
    INVALID_KAKAO_CODE(HttpStatus.BAD_REQUEST, "USER4008"),
    FAILED_KAKAO_SIGNIN(HttpStatus.BAD_REQUEST, "USER4009"),

    // 지도 편지 에러
    MAP_LETTER_NOT_FOUND(HttpStatus.NOT_FOUND, "MAP4000"),
    LOCATION_NOT_FOUND(HttpStatus.BAD_REQUEST, "MAP4001"),
    EMPTY_MAP_LETTER_CONTENT(HttpStatus.BAD_REQUEST, "MAP4002"),
    EMPTY_MAP_LETTER_TITLE(HttpStatus.BAD_REQUEST, "MAP4003"),
    EMPTY_MAP_LETTER_TARGET(HttpStatus.BAD_REQUEST, "MAP4004"),
    MAP_LETTER_ALREADY_DELETED(HttpStatus.BAD_REQUEST, "MAP4005"),
    EMPTY_MAP_LETTER_DESCRIPTION(HttpStatus.BAD_REQUEST, "MAP4006"),
    EMPTY_REPLY_MAP_LETTER_SOURCE(HttpStatus.BAD_REQUEST, "MAP4007"),
    SOURCE_MAP_LETTER_NOT_FOUND(HttpStatus.BAD_REQUEST, "MAP4008"),
    LETTER_ALREADY_ARCHIVED(HttpStatus.BAD_REQUEST, "MAP4009"),
    LETTER_ALREADY_REPLY(HttpStatus.BAD_REQUEST, "MAP40010"),
    DISTANCE_TOO_FAR(HttpStatus.BAD_REQUEST, "MAP40011"),
    LETTER_BLOCKED(HttpStatus.BAD_REQUEST, "MAP40012"),

    ;


    private final HttpStatus httpStatus;
    private final String code;
}
