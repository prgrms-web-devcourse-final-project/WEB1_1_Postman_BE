name: Main Branch CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 데이터베이스 환경변수 (RDS)
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      ## Redis 환경변수
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}

      # FCM 환경변수
      BOTTLER_FCM_BASE64: ${{ secrets.BOTTLER_FCM_BASE64 }}

      # AWS 환경변수
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

      # ECR 환경변수
      ECR_URI: ${{ secrets.ECR_URI }}

      # S3 환경변수
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
      BASE_URL: ${{ secrets.BASE_URL }}

      # gpt 환경변수
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
      - name: Execute Gradle build
        run: |
          cd backend/bottler # 프로젝트 위치에 맞게 추후 수정
          ./gradlew build

      - name: Login to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Image Build
        run: |
          cd backend/bottler
          docker build --platform linux/arm64/v8 -t l2yupa/bottler -f Dockerfile-dev .

      - name: Docker Hub Push
        run: docker push l2yupa/bottler

  deploy:
    runs-on: [self-hosted, Linux, 64]
    needs: build

    steps:
      - name: Pull Latest Docker Image
        run: |
          sudo docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull l2yupa/bottler

      - name: Docker Compose
        run: |
          sudo docker run --name spring-baton -p 8080:8080 2023baton/2023baton:latest 1>> build.log 2>> error.log &
